<<<<<<< Updated upstream
## wd
#setwd("Desktop/Thèse/GitKraken/tests_gmse/")
setwd("Documents/GitKraken/tests_gmse/")
=======
loess.span=0,
dt=1, dj=1/250,
lowerPeriod=16,upperPeriod = 128,
make.pval=T, n.sim=10)
library("WaveletComp", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library(WaveletComp)
my.wt = analyze.wavelet(debit, "debit",
loess.span=0,
dt=1, dj=1/250,
lowerPeriod=16,upperPeriod = 128,
make.pval=T, n.sim=10)
my.wt = analyze.wavelet(debit,
loess.span=0,
dt=1, dj=1/250,
lowerPeriod=16,upperPeriod = 128,
make.pval=T, n.sim=10)
d <- read.table("/Users/adrianbach/Desktop/M2_MSE/ATE/Donnees peche.txt", col.names = T)
rm(list = ls())
library(WaveletComp)
d <- read.table("/Users/adrianbach/Desktop/M2_MSE/ATE/Donnees peche.txt", col.names = T)
d <- read.table("/Users/adrianbach/Desktop/M2_MSE/ATE/Donnees peche.txt")
debit <- d[,1]
debit
larve <- d[,2]
my.wt = analyze.wavelet(debit,
loess.span=0,
dt=1, dj=1/250,
lowerPeriod=16,upperPeriod = 128,
make.pval=T, n.sim=10)
my.wt = analyze.wavelet(t(debit),
loess.span=0,
dt=1, dj=1/250,
lowerPeriod=16,upperPeriod = 128,
make.pval=T, n.sim=10)
class(debit)
debit <- as.data.frame(d[,1])
larve <- as.data.frame(d[,2])
my.wt = analyze.wavelet(debit,
loess.span=0,
dt=1, dj=1/250,
lowerPeriod=16,upperPeriod = 128,
make.pval=T, n.sim=10)
wc.image(my.wt, timelab="time (days)", periodlab="period (days)",
main="cross-wavelet power",
legend.params=list(lab="cross-wavelet power levels (quantiles)"))
wt.image(my.wt,
legend.params=list(lab="wavelet power levels (quantiles)", lab.line=3.5,
label.digits=2))
X11();wt.image(my.wt,
legend.params=list(lab="wavelet power levels (quantiles)", lab.line=3.5,
label.digits=2))
larve.wt = analyze.wavelet(larve,
loess.span=0,
dt=1, dj=1/250,
lowerPeriod=16,upperPeriod = 128,
make.pval=T, n.sim=10)
X11();wt.image(larve.wt,
legend.params=list(lab="wavelet power levels (quantiles)", lab.line=3.5,
label.digits=2))
rm(list = ls())
library(ade4)
data(jv73)
d <- jv73
boxplot(d$morpho)
d <- dist(scale(jv73$morpho))
den1 <- hclust(d, method = "ward")
den2 <- hclust(d, method = "complete")
den3 <- hclust(d, method = "average")
den4 <- hclust(d, method = "single")
plot(den1)
plot(den2)
d1 <- cophenetic(den1)
d2 <- cophenetic(den2)
d3 <- cophenetic(den3)
d4 <- cophenetic(den4)
cor(d1, d)
cor(d2, d)
cor(d3, d)
cor(d4, d)
plot(den3)
cutree(den3, 3)
s.label(jv73$xy, contour = jv73$contour, incl=F)
G<-cutree(den3, 3)
points(jv73$xy, col=G, pch=18,cex=3)
library(MASS)
data("crabs")
attach(crabs)
names()
names(crabs)
group <- sp:sex
group
(afd1 <- lda(group~FL+RW+CL+CW+BD))
afd2 <- lda(group~FL+RW+CL+CW+BD, CV=T)
names(afd2)
table(group, afd2$class)
length(group)
10/length(group)*100
(1-10/length(group))*100
afd3 <- discrimin(dudi.pca(crabs[,4:8]), group)
names(afd3)
s.arrow(afd3$fa)
s.class(afd3$li, group)
rand <- rtest(afd3,10000) # 10000 permutations
rand
plot(rand)
qda1 <- qda(group~FL+RW+CL+CW+BD, CV=T)
names(qda1)
table(group, qda1$class)
library(vegan)
mod<-betadisper(d,G)
anova(mod)
TukeyHSD(mod)
G
plot(mod)
boxplot(mod)
plot(TukeyHSD(mod))
rm(list = ls())
>>>>>>> Stashed changes
getwd()
## wd
#setwd("Desktop/Thèse/GitKraken/tests_gmse/")
setwd("/home/adrian/Documents/GitKraken/tests_gmse/")
getwd()
# gmse
library("GMSE", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.5")
sim1 <- gmse_apply()
sim1
# from article
sim_1 <- gmse(land_ownership = TRUE, stakeholders = 2, observe_type = 0,
res_death_K = 2000, manage_target = 1000, RESOURCE_ini = 1000,
<<<<<<< Updated upstream
user_budget = 1000, manager_budget = 1000, res_consume = 1,
scaring = TRUE, plotting = T, time_max = 10)
names(sim_1)
sim_1$action[[1]]  # action array at first time step
sim_1$observation[[3]]
sim_1$land
sim_1$paras
sim_1$agents[[2]]
sim_1$agents[[1]]
sim_1$agents
=======
user_budget = 1000, manager_budget = 2000, res_consume = 1,
scaring = TRUE, plotting = F, time_max = 10)
# avec gmse_table
budget_table <- gmse_table(gmse_sim = sim_budget2)
budget_table
## manager n'agit jamais
(gmse_rep_jaja <- gmse_replicates(replicates = 10, time_max = 10, plotting = F, stakeholders = 2, manage_freq = 11))
## effet d'un ecart de budget
# mm budget
gmse_rep_same <- gmse_replicates(replicates = 10, time_max = 10, plotting = F, stakeholders = 2)
gmse_rep_same
# nb de replicats
nbrep <- 5
target <- 1000
budget <- 1000
# nb de mesures a relever: deux calculs + pop
nbmesures <- 3
# meme budget
facteur <- 1
# init table
res_f1 <- matrix(nrow = nbrep, ncol = nbmesures*3, dimnames = list(c(1:nbrep),c("pop_mean","pop_sd","pop_95ci","dev_mean","dev_sd","dev_95ci","yield_mean","yield_sd","yield_95ci")))
# loop
for (i in 1:nbrep) {
sim <- gmse(time_max = 10, stakeholders = 2, land_ownership = T, manage_target = target, user_budget = budget, manager_budget = facteur*budget)
table <- gmse_table(sim)
ts <- sqrt(max(table[,1]))
# mean pop
res_f1[i,1] <- mean(table[,2])
res_f1[i,2] <- sd(table[,2])
res_f1[i,3] <- 1.86*res_f1[i,2]/sqrt(ts)
res_f1[i,7] <- mean(table[,8])
res_f1[i,8] <- sd(table[,8])
res_f1[i,9] <- 1.86*res_f1[i,8]/sqrt(ts)
# deviation from target
dev <- abs(table[,2]-target)
res_f1[i,4] <- mean(dev)
res_f1[i,5] <- sd(dev)
res_f1[i,6] <- 1.86*res_f1[i,5]/sqrt(ts)
}
res_f1
# avec un plus grand budget pour les
facteur <- 2
# init table
res_f2 <- matrix(nrow = nbrep, ncol = nbmesures*3, dimnames = list(c(1:nbrep),c("pop_mean","pop_sd","pop_95ci","dev_mean","dev_sd","dev_95ci","yield_mean","yield_sd","yield_95ci")))
# loop
for (i in 1:nbrep) {
sim <- gmse(time_max = 10, stakeholders = 2, land_ownership = T, manage_target = target, user_budget = budget, manager_budget = facteur*budget)
table <- gmse_table(sim)
ts <- sqrt(max(table[,1]))
# mean pop
res_f2[i,1] <- mean(table[,2])
res_f2[i,2] <- sd(table[,2])
res_f2[i,3] <- 1.86*res_f2[i,2]/sqrt(ts)
res_f2[i,7] <- mean(table[,8])
res_f2[i,8] <- sd(table[,8])
res_f2[i,9] <- 1.86*res_f2[i,8]/sqrt(ts)
# deviation from target
dev <- abs(table[,2]-target)
res_f2[i,4] <- mean(dev)
res_f2[i,5] <- sd(dev)
res_f2[i,6] <- 1.86*res_f2[i,5]/sqrt(ts)
}
# premier plot des resultats
boxplot(res_f1[,1],res_f2[,1])
boxplot(res_f1[,1+3],res_f2[,1+3])
boxplot(res_f1[,1+6],res_f2[,1+6])
# premier plot des resultats
par(mfrow=c(1,1))
boxplot(res_f1[,1],res_f2[,1])
boxplot(res_f1[,1+3],res_f2[,1+3])
boxplot(res_f1[,1+6],res_f2[,1+6])
res_f2
library("GMSE", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
# nb de replicats
nbrep <- 5
target <- 1000
budget <- 1000
# nb de mesures a relever: deux calculs + pop
nbmesures <- 3
# meme budget
facteur <- 1
# init table
res_f1 <- matrix(nrow = nbrep, ncol = nbmesures*3, dimnames = list(c(1:nbrep),c("pop_mean","pop_sd","pop_95ci","dev_mean","dev_sd","dev_95ci","yield_mean","yield_sd","yield_95ci")))
# loop
for (i in 1:nbrep) {
sim <- gmse(time_max = 10, stakeholders = 2, land_ownership = T, manage_target = target, user_budget = budget, manager_budget = facteur*budget)
table <- gmse_table(sim)
ts <- sqrt(max(table[,1]))
# mean pop
res_f1[i,1] <- mean(table[,2])
res_f1[i,2] <- sd(table[,2])
res_f1[i,3] <- 1.86*res_f1[i,2]/sqrt(ts)
res_f1[i,7] <- mean(table[,8])
res_f1[i,8] <- sd(table[,8])
res_f1[i,9] <- 1.86*res_f1[i,8]/sqrt(ts)
# deviation from target
dev <- abs(table[,2]-target)
res_f1[i,4] <- mean(dev)
res_f1[i,5] <- sd(dev)
res_f1[i,6] <- 1.86*res_f1[i,5]/sqrt(ts)
}
View(res_f1)
View(res_f1)
table
# avec un plus grand budget pour les managers
facteur <- 1.1
# init table
res_f2 <- matrix(nrow = nbrep, ncol = nbmesures*3, dimnames = list(c(1:nbrep),c("pop_mean","pop_sd","pop_95ci","dev_mean","dev_sd","dev_95ci","yield_mean","yield_sd","yield_95ci")))
# loop
for (i in 1:nbrep) {
sim <- gmse(time_max = 10, stakeholders = 2, land_ownership = T, manage_target = target, user_budget = budget, manager_budget = facteur*budget)
table <- gmse_table(sim)
ts <- sqrt(max(table[,1]))
# mean pop
res_f2[i,1] <- mean(table[,2])
res_f2[i,2] <- sd(table[,2])
res_f2[i,3] <- 1.86*res_f2[i,2]/sqrt(ts)
# final year's mean yield
res_f2[i,7] <- mean(table[,8])
res_f2[i,8] <- sd(table[,8])
res_f2[i,9] <- 1.86*res_f2[i,8]/sqrt(ts)
# deviation from target
dev <- abs(table[,2]-target)
res_f2[i,4] <- mean(dev)
res_f2[i,5] <- sd(dev)
res_f2[i,6] <- 1.86*res_f2[i,5]/sqrt(ts)
}
facteur <- 1.2
# init table
res_f3 <- matrix(nrow = nbrep, ncol = nbmesures*3, dimnames = list(c(1:nbrep),c("pop_mean","pop_sd","pop_95ci","dev_mean","dev_sd","dev_95ci","yield_mean","yield_sd","yield_95ci")))
# loop
for (i in 1:nbrep) {
sim <- gmse(time_max = 10, stakeholders = 2, land_ownership = T, manage_target = target, user_budget = budget, manager_budget = facteur*budget)
table <- gmse_table(sim)
ts <- sqrt(max(table[,1]))
# mean pop
res_f3[i,1] <- mean(table[,2])
res_f3[i,2] <- sd(table[,2])
res_f3[i,3] <- 1.86*res_f3[i,2]/sqrt(ts)
# final year's mean yield
res_f3[i,7] <- mean(table[,8])
res_f3[i,8] <- sd(table[,8])
res_f3[i,9] <- 1.86*res_f3[i,8]/sqrt(ts)
# deviation from target
dev <- abs(table[,2]-target)
res_f3[i,4] <- mean(dev)
res_f3[i,5] <- sd(dev)
res_f3[i,6] <- 1.86*res_f3[i,5]/sqrt(ts)
}
# premier plot des resultats
par(mfrow=c(1,1))
boxplot(res_f1[,1],res_f2[,1],res_f3[,1])
boxplot(res_f1[,1+3],res_f2[,1+3],res_f3[,1+3])
boxplot(res_f1[,1+6],res_f2[,1+6],res_f3[,1+6])
res_f3
table
>>>>>>> Stashed changes
